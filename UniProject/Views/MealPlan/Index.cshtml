@model IEnumerable<UniProject.Models.Classes.MealPlan>


@{
    ViewData["Title"] = "Index";
}

<section id="mealPlanPageContainer" class="container upTraslated opacity-0">
    <h1 class="text-center">MealPlans</h1>
    <!-- Button trigger modal -->
    <button id="addMealButton" type="button" class="btn btn-primary " data-bs-toggle="modal" data-bs-target="#exampleModal">
        Add a meal plan
    </button>
    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="false">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                    <button type="button" class="btn btn-close  btn-light" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form method="post">
                        <div class="mb-3">
                            <label for="Name" class="form-label">@Html.DisplayNameFor(model => model.Name)</label>
                            <input data-purpose="holdName" type="text" class="form-control" id="Name" aria-describedby="nameHelp">
                            <div id="nameHelp" class="form-text">Choose a name for your meal plan.</div>
                        </div>
                        <div class="mb-3">
                            <label for="Description" class="form-label">@Html.DisplayNameFor(model => model.Description)</label>
                            <input data-purpose="holdDescription" type="text" class="form-control" id="Description" aria-describedby="descriptionHelp">
                            <div id="descriptionHelp" class="form-text">Write a short description , which will help you , if you forget what the meal plan was about</div>
                        </div>
                        <div class="mb-3">
                            <label for="MacroNutrients" class="form-label">@Html.DisplayNameFor(model => model.MacroNutrients)</label>
                            <input data-purpose="holdMacros" type="text" class="form-control" id="MacroNutrients" aria-describedby="macroNutrientsHelp">
                            <div id="MacroNutrients" class="form-text">Enter the nutrients of your plan</div>
                        </div>

                        <button  data-purpose="submit" type="submit" class="btn btn-primary submitBtn" data-bs-dismiss="modal">Submit</button>
                    </form>
                </div>
                <div class="modal-footer">
                    <button  type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

                </div>
            </div>
        </div>
    </div>


    @if (Model != null && Model.Any())
    {
        <table class="table table-hover  table-striped ">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Description)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MacroNutrients)
                    </th>
                    <th aria-hidden="true">
                        
                    </th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MacroNutrients)
                        </td>
                        <td>


                            <a data-MealPlanId=@Html.DisplayFor(modelItem => item.Id) tabindex="0" data-purpose="deleteMealPlan" class="btn btn-danger ">
                                
                                <i class="bi bi-trash "></i>
                            </a>
                        </td>
                    </tr>
                }


            </tbody>
        </table>
    }
    else
    {
       
        <p id="mealPlansDefaultParagraph">
            
               <strong>
                    No meal plans found.
               </strong>
            
        </p>
    }

</section>

<script defer>
   document.addEventListener('DOMContentLoaded',() =>{
        const selectBasedOnData = (htmlElement = 'input', typeOfData) => document.querySelector(`${htmlElement}[data-purpose=${typeOfData}]`)
       
        const submitButton = selectBasedOnData('button','submit')
        const nameInput = selectBasedOnData('input','holdName')
        const descriptionInput = selectBasedOnData('input','holdDescription')
        const macroNutrientsInput = selectBasedOnData('input','holdMacros')
        const deleteButtons = document.querySelectorAll('a[data-purpose=deleteMealPlan]')



        // post Request
        submitButton.addEventListener('click', (e) => {
            e.preventDefault();
           
            const mealPlan = {
                name : nameInput.value,
                description : descriptionInput.value,
                macroNutrients: macroNutrientsInput.value,
                
            }
           
            $.ajax({
                url: '/MealPlan/AddMealPlan',
                type: 'POST',
                data: mealPlan,
                success : function(result) {
                    swal('Form submitted successfully!',{
                        icon : 'success'
                    }) 
                },
                Error : function(xhr,status,error){
                    alert(error)
                }
            })

        })
        // delete request
      
        deleteButtons.forEach(deleteButton => {
            deleteButton.addEventListener('click', () => {
                let mealPlanId = deleteButton.getAttribute('data-MealPlanId');

                swal({
                    title: 'Are you sure you want to delete that?',
                    icon: 'warning',
                    buttons: true,
                    dangerMode: true
                }).then((willDelete) => {
                    if (willDelete) {
                        $.ajax({
                            url: '/MealPlan/DeleteMealPlanById',
                            type: 'DELETE',
                            data: { id: mealPlanId },
                            success: function (result) {
                                swal('Meal plan deleted successfully!', {
                                    icon: 'success'
                                });
                            },
                            error: function (xhr, status, error) {
                                swal(error, {
                                    icon: 'warning'
                                });
                            }
                        });
                    }
                });
            });
        });

        const mealPlanPageContainer = document.getElementById('mealPlanPageContainer')
       
        const removeClassFromEntry = (className, entry) => {
            return entry.target.classList.remove(className, entry.isIntersecting)
        }
        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {

                
                removeClassFromEntry('opacity-0', entry)
                removeClassFromEntry('upTraslated', entry)

            })
        }, {
            threshold: 1,
        })

        observer.observe(mealPlanPageContainer)
      
   })
    
</script>