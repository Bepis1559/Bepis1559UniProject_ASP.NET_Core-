@model IEnumerable<UniProject.Models.Classes.MealPlan>


@{
    ViewData["Title"] = "Index";
}

<section id="mealPlanPageContainer" class="container upTraslated opacity-0">
    <header>
        <h1 class="text-center">MealPlans</h1>
       
   </header>
    <div id="mealPlanAddBtnContainer">
        <partial name="_Modal.cshtml" />
    </div>



    @if (Model != null && Model.Any())
    {
        <table class="table table-hover  table-striped ">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Description)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MacroNutrients)
                    </th>
                    <th aria-hidden="true">
                        
                    </th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MacroNutrients)
                        </td>
                        <td>


                            <a data-MealPlanId=@Html.DisplayFor(modelItem => item.Id) tabindex="0" data-purpose="deleteMealPlan" class="btn btn-danger ">
                                
                                <i class="bi bi-trash "></i>
                            </a>
                        </td>
                    </tr>
                }


            </tbody>
        </table>
    }
    else
    {
       
        <p id="mealPlansDefaultParagraph">
            
               <strong>
                    No meal plans found.
               </strong>
            
        </p>
    }

</section>

<script defer>
   document.addEventListener('DOMContentLoaded',() =>{
        
        const deleteButtons = document.querySelectorAll('a[data-purpose=deleteMealPlan]')
        const mealPlanPageContainer = document.getElementById('mealPlanPageContainer')


      


       
        // delete request
      
        deleteButtons.forEach(deleteButton => {
            deleteButton.addEventListener('click', () => {
                let mealPlanId = deleteButton.getAttribute('data-MealPlanId');

                swal({
                    title: 'Are you sure you want to delete that?',
                    icon: 'warning',
                    buttons: true,
                    dangerMode: true
                }).then((willDelete) => {
                    if (willDelete) {
                        $.ajax({
                            url: '/MealPlan/DeleteMealPlanById',
                            type: 'DELETE',
                            data: { id: mealPlanId },
                            success: function (result) {
                                swal('Meal plan deleted successfully!', {
                                    icon: 'success'
                                });
                            },
                            error: function (xhr, status, error) {
                                swal(error, {
                                    icon: 'warning'
                                });
                            }
                        });
                    }
                });
            });
        });

        
       
        const removeClassFromEntry = (className, entry) => {
            return entry.target.classList.remove(className, entry.isIntersecting)
        }
        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {

                
                removeClassFromEntry('opacity-0', entry)
                removeClassFromEntry('upTraslated', entry)

            })
        }, {
            threshold: 1,
        })

        observer.observe(mealPlanPageContainer)
      
   })
    
</script>