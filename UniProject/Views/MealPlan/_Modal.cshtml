@model IEnumerable<UniProject.Models.Classes.MealPlan>
<button type="button"  data-bs-toggle="modal" data-bs-target="#addMealPlan">
    Add a meal plan
</button>
<!-- Modal -->
<div class="modal fade" id="addMealPlan" tabindex="-1" aria-labelledby="addMealPlanLabel" aria-hidden="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMealPlanLabel">Modal title</h5>
                <button type="button" class="btn btn-close  btn-light" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post">
                    <div class="mb-3">
                        <label for="Name" class="form-label">@Html.DisplayNameFor(model => model.Name)</label>
                        <input required data-purpose="holdName" type="text" class="form-control mealPlanInput" id="Name" aria-describedby="nameHelp">
                        <div id="nameHelp" class="form-text">Choose a name for your meal plan.</div>
                    </div>
                    <div class="mb-3">
                        <label for="Description" class="form-label">@Html.DisplayNameFor(model => model.Description)</label>
                        <input required data-purpose="holdDescription" type="text" class="form-control mealPlanInput" id="Description" aria-describedby="descriptionHelp">
                        <div id="descriptionHelp" class="form-text">Write a short description about the meal plan.</div>
                    </div>



                    <div class="mb-3">
                        <label for="protein" class="form-label">Protein : </label>
                        <input value="50" min="0"  required data-purpose="holdProtein" type="number" class="form-control mealPlanInput nutrient" id="protein" aria-describedby="macroNutrientsHelp">
                        <div class="form-text">Enter the amount of protein for this plan. </div>
                    </div>



                    <div class="mb-3">
                        <label for="carbs" class="form-label">Carbohydrates : </label>
                        <input value="100" min="0" required data-purpose="holdCarbs" type="number" class="form-control mealPlanInput nutrient" id="carbs" aria-describedby="carbsHelp">
                        <div  class="form-text">Enter the amount of carbohydrates for this plan.</div>
                    </div>




                    <div class="mb-3">
                        <label for="fats" class="form-label">Fats : </label>
                        <input value="20" min="0" required data-purpose="holdMacros" type="number" class="form-control mealPlanInput nutrient" id="fats" aria-describedby="fatsHelp">
                        <div  class="form-text">Enter the nutrients of your plan</div>
                    </div>


                    <button data-purpose="submit" type="submit" class="btn btn-primary submitBtn" data-bs-dismiss="modal">Submit</button>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div>

<script defer>
    const selectBasedOnData = (htmlElement = 'input', typeOfData) => document.querySelector(`${htmlElement}[data-purpose=${typeOfData}]`)

    const submitButton = selectBasedOnData('button', 'submit')
    const nameInput = selectBasedOnData('input', 'holdName')
    const descriptionInput = selectBasedOnData('input', 'holdDescription')
    const nutrients = document.querySelectorAll('.nutrient')
    const mealPlanPageContainer = document.getElementById('mealPlanPageContainer')
    


    // prevent user input , if not a number for nutrients
    nutrients.forEach(nutrient => {
        nutrient.addEventListener('keypress',(e) =>{
            if (isNaN(parseInt(e.key)) || event.key.charCodeAt() === 32) {
               e.preventDefault();
            }
        })
    })

    // post Request
    submitButton.addEventListener('click', (e) => {
        e.preventDefault();
        let currentTable = document.querySelector('.table')
        if(currentTable == null){
            currentTable = create('table')
        }
        
        const mealPlan = {
            name: nameInput.value,
            description: descriptionInput.value,
            macroNutrients: `${nutrients[0].value??=50}g ${nutrients[0].getAttribute('id')},
            ${nutrients[1].value??=50}g ${nutrients[1].getAttribute('id')}
            ,${nutrients[2].value??=50}g ${nutrients[2].getAttribute('id')}`   
        }
       
        $.ajax({
            url: '/MealPlan/AddMealPlan',
            type: 'POST',
            data: mealPlan,
            success: function (result) {
                swal('Form submitted successfully!', {
                    icon: 'success'
                })
               const newTable = handleTableGeneration(currentTable)
                mealPlanPageContainer.appendChild(newTable)
            },
            Error: function (xhr, status, error) {
                alert(error)
            }
        })

    })


    function handleTableGeneration(tableToRemove) {
       
        tableToRemove.remove()
        const newTable = create('table')
        newTable.classList.add('table')
        const thead = create('thead')
        const tbody = create('tbody')
        const theadRow = create('tr')

        const thName = createAndSetText('th','Name')
        const thDescription = createAndSetText('th', 'Description')
        const thMacroNutrients = createAndSetText('th', 'MacroNutrients')
        const thDelete = create('th')
        thDelete.setAttribute('aria-hidden',true)
        appendChildren(theadRow, thName, thDescription, thMacroNutrients, thDelete)
       

        thead.appendChild(theadRow)
        newTable.appendChild(thead)

       


        // get all mealPlans
             
        $.ajax({
            url: '/MealPlan/GetAllMealPlans',
            type: 'GET',
            dataType: 'json',
            success: function (result) {
                result.forEach( (mealPlan) =>{
                    const ids = []
                    const tbodyRow = create('tr')
                    const tdName = createAndSetText('td', mealPlan.name)
                    const tdDescription = createAndSetText('td', mealPlan.description)
                    const tdMacroNutrients = createAndSetText('td', mealPlan.macroNutrients.replace(/\s*,\s*/g, ","))
                    
                    const tdDelete = create('td')

                   
                    // delete Button
                    const deleteBtn = create('a')
                    deleteBtn.setAttribute('tabindex',0)
                    deleteBtn.classList.add('btn', 'btn-danger')
                    const icon = create('i')
                    icon.classList.add('bi','bi-trash')
                    deleteBtn.appendChild(icon)
                    deleteBtn.addEventListener('click', () => {
                       

                        const currentButtonTableRow = deleteBtn.parentElement.parentElement
                        // console.log(currentButtonTableRow)
                        swal({
                            title: 'Are you sure you want to delete that?',
                            icon: 'warning',
                            buttons: true,
                            dangerMode: true
                        }).then((willDelete) => {
                            if (willDelete) {
                                $.ajax({
                                    url: '/MealPlan/DeleteMealPlanById',
                                    type: 'DELETE',
                                    data: { id: mealPlan.id },
                                    success: function () {
                                        swal('Meal plan deleted successfully!', {
                                            icon: 'success'
                                        });

                                        currentButtonTableRow.remove()
                                    },
                                    error: function (xhr, status, error) {
                                        swal(error, {
                                            title: 'Something went wrong',
                                            icon: 'warning',
                                            dangerMode: true
                                        });
                                    }
                                });
                            }
                        });
                    });




                    tdDelete.appendChild(deleteBtn)
                    //
                    appendChildren(tbodyRow, tdName, tdDescription, tdMacroNutrients, tdDelete)
                    tbody.appendChild(tbodyRow)
                })
                newTable.appendChild(tbody)
                mealPlanPageContainer.appendChild(newTable)
                
            },
            Error: function (xhr, status, error) {
                alert(error)
            }
        })
        


        return newTable
    }

    function appendChildren(parent,...children){
        children.forEach(child =>{
            parent.appendChild(child)
        })
    }
    function createAndSetText(element,text){
        const newElement = document.createElement(element)
        newElement.innerText = text
        return newElement
    }

    function create(element) {
       const newElement = document.createElement(element)
        return newElement
    }

    
</script>